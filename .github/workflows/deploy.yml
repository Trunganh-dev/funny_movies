name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.GITHUB_ACTOR }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}/your_image_name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Save Docker image to file
      run: docker save ghcr.io/${{ github.repository }}/your_image_name:latest -o image.tar

    - name: Upload image file to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_KEY }}
        EC2_PORT: ${{ secrets.EC2_PORT }}
      run: |
        echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
        chmod 400 ec2_key.pem
        scp -i ec2_key.pem -o StrictHostKeyChecking=no -P ${{ secrets.EC2_PORT }} image.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/

    - name: Load and run Docker image on EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_KEY: ${{ secrets.EC2_KEY }}
        EC2_PORT: ${{ secrets.EC2_PORT }}
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no -p ${{ secrets.EC2_PORT }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        docker load -i image.tar
        docker run -d --name your_container_name -p 80:80 ghcr.io/your_github_username/your_image_name:latest
        EOF
